Vanessa Lee
504766034
CS 35L Lab 2

Exercise 1.1:
1.
e m a c s SP e x e r 1 . h t m l

2.
C-s H T M L
ENTER

3.
C-s s c a v e n g e r
ENTER
M-b

4.
C-s s e l f
ENTER
M-b

5.
C-s a r r
ENTER
M-b

6.
C-e

7.
C-a

8. There are existing commands in emacs that allow you do to things such as, skip to end of line, or move to end of paragraph, etc. This allows for much faster movement than just going down one line at a time with the arrow keys, because commands such as move to end of paragraph can allow you to move down multiple lines at once. To quickly search for certain words, you can use the C-s command which acts like a search.

9. Did you move the cursor using the arrow keys? If so, repeat the above steps, without using the arrow keys.

10.
C-z


Exercise 1.2:
1. 
e m a c s SP e x e r 2 . h t m l

2.
M-g M-g 1 8
C-k

3.
C-s D E
ENTER
C-a
C-k

4.
C-s w i k i
C-s, C-s
ENTER
M-a
C-M-k

5.
C-s < !
C-b, C-b
C-M-k

C-n
C-a
C-M-k

C-s < !
ENTER
C-a
C-M-k

6. 
C-x
C-s
C-z


Exercise 1.3:
1.
e m a c s SP e x e r 3 . h t m l

2.
M-% 
A s s i g n m e n t SP 1
A s s i g n m e n t SP 4 2
SP
SP
ESC

3.
M-%
U T F - 8
ENTER
U S - A S C I I
SP
ESC

4.
C-M-s [ ^ [ : a s c i i : ] ]
C-a
C-M-k

5.
C-s < / o l > 
ENTER
ENTER

6.
C-x
C-c


Exercise 1.4:
1. 
c a t SP e x e r 2 . h t m l SP e x e r 2 . d i f f SP > e x e r 4 . h t m l

2.
e m a c s SP e x e r 4 . h t m l

3.
M->
(select text)
(copy paste)

5.
C-s - - - sp 
ENTER
Right Right Right
C-SP 
M->
C-w

6.
C-x u

7.
- - >
C-s - - - sp 
ENTER
< ! - -
ENTER

8.
C-r < o l (7 times)
C-r < o l
C-r < o l
C-r < o l
C-r < o l
C-r < o l
C-r < o l
ENTER
M-% < o l >
ENTER
< o L >
ENTER
SP
SP
SP
SP
SP
SP
SP (7 times to replace 7 <ol>)

9.
d i f f SP - u SP e x e r 1 . h t m l SP e x e r 4 . h t m l SP > e x e r 4 . d i f f


Exercise 1.5:
1.
e m a c s
M-x s h e l l
m k d i r SP j u n k

2.
(using shell in emacs)
c d SP j u n k
t o u c h SP h e l l o . c
e x i t
C-x C-f h e l l o . c
ENTER
(paste provided code)
C-x C-s

3.
M-x c o m p i l e
h e l l o . c
h e l  l o

4.
M-! . / h e l l o

5.
OUTPUT:
-*- mode: compilation; default-directory: "~/junk/" -*-
Compilation started at Thu Oct  4 16:35:25

make -k hello.c hello

Compilation finished at Thu Oct  4 16:35:25

#include <stdio.h>
int
main (void)
{
  char n = '\n', b = '\\', q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '\
%cn', b = '%c%c', q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, \
n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);
  return 0;
}



Exercise 1.6:
1.
e m a c s
C-x b
ENTER

2.
( r a n d o m SP " 5 0 4 - 7 6 6 - 0 3 4 " )
C-j
RESULT: 455887451859034468

3.
( s e t q SP x ( r a n d o m ) )  (X = -1725130737494538498)
C-j
( s e t q SP y ( r a n d o m ) )  (Y = 1613636184043722592)
C-j

4.
( * SP x SP y )
C-j
ANSWER: 2115728253514838336
The answer is incorrect. X is a negative integer while Y is a positive integer, so multiplying a negative with a positive integer should result in a negative integer, but that is not the case here.

5.
M - : SP ( * SP x SP y )
C-j
ANSWER: 2115728253514838336
The answer is the same as previous.

6.
In math, there is an infinite range of numbers to choose at random, but with computers there is not an infinite amount of space. Also, the computer most likely uses an algorithm to choose the number, meaning that it is not truly random.